# install, but don't load
install.packages("tidygraph")
library(pacman)
p_load(tidyverse, ggraph, tidytext, readxl, igraph)
# import group membership
getwd()
setwd("/Users/FlowersnIce-cream/Downloads/cogsci_otree_net")
nodes <- read_csv("edgelist.csv")
edges <- read_csv("nodes.csv")
View(edges)
View(nodes)
View(edges)
View(nodes)
net_1 <- tidygraph::tbl_graph(nodes = nodes, edges = ed_everything, directed = FALSE)
net_1 <- tidygraph::tbl_graph(nodes = nodes, edges = edges, directed = FALSE)
library(ggraph)
library(igraph)
p_load(ggraph,igraph)
graph <- graph_from_data_frame(nodes)
View(edges)
graph <- graph_from_data_frame(edges)
# Not specifying the layout - defaults to "auto"
ggraph(graph) +
geom_edge_link(aes()) +
geom_node_point()
View(edges)
View(nodes)
graph <- graph_from_data_frame(nodes)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes()) +
geom_node_point()
nodes$X1 <- NULL
graph <- graph_from_data_frame(nodes)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes()) +
geom_node_point()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes(colour = factor(edges$gender))) +
geom_node_point()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes()) +
geom_node_point()
View(nodes)
graph <- graph_from_data_frame(nodes, vertices = nodes[,2])
edges$X1 <- NULL
graph <- graph_from_data_frame(edges, vertices = nodes)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes()) +
geom_node_point()
graph <- graph_from_data_frame(nodes, vertices = edges)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes()) +
geom_node_point()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100, aes(colour = gender)) +
geom_edge_link(aes()) +
geom_node_point()
# Not specifying the layout - defaults to "auto"
ggraph(graph, aes(colour = gender)) +
geom_edge_link(aes()) +
geom_node_point()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes(colour = gender)) +
geom_node_point()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes(colour = "gender")) +
geom_node_point()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes(colour = edges$gender)) +
geom_node_point()
geom_edge_link(aes(colour = factor(edges$gender)) +
geom_node_point()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes(colour = factor(edges$gender))) +
geom_node_point()
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link(aes(colour = factor(gender))) +
geom_node_point()
geom_node_point(aes(colour = factor(gender))
graph <- graph_from_data_frame(edges, vertices = nodes)
graph <- graph_from_data_frame(edges, vertices = nodes)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
v(graphing)[]
v(graph)[]
graph <- graph_from_data_frame(nodes, vertices = edges)
v(graph)[]
v(graph)[]
graph <- graph_from_data_frame(node, vertices = nodes)
graph <- graph_from_data_frame(edges, vertices = nodes)
nodes <- read_csv("edgelist.csv")
edges <- read_csv("nodes.csv")
nodes$X1 <- NULL
edges$X1 <- NULL
graph <- graph_from_data_frame(edges, vertices = nodes)
nodes <- read_csv("edgelist.csv")
nodes$X1 <- NULL
edges$X1 <- NULL
edges <- read_csv("nodes.csv")
nodes <- read_csv("edgelist.csv")
nodes <- read_csv("nodes.csv")
nodes <- read_csv("nodes.csv")
edges <- read_csv("edgelist.csv")
nodes$X1 <- NULL
edges$X1 <- NULL
graph <- graph_from_data_frame(edges, vertices = nodes)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_node_point(aes(color = gender)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link() +
geom_node_point(aes(color = gender))
v(graph)[]
V(graph)[]
V(graph)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link() +
geom_node_point(aes(color = gender, size = V(graph)))
V(graph)[]
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link() +
geom_node_point(aes(color = gender, size = V(graph)[]))
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link() +
geom_node_point(aes(color = gender))+
scale_edge_color_brewer(palette = 'Dark2')
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link() +
geom_node_point(aes(color = gender, label=node))+
scale_edge_color_brewer(palette = 'Dark2')
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link() +
geom_node_point(aes(color = gender, label= node ))
graph <- graph_from_data_frame(edges, vertices = nodes)
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link() +
geom_node_point(aes(color = gender, label= node ))
# Not specifying the layout - defaults to "auto"
ggraph(graph, layout = 'kk', maxiter = 100) +
geom_edge_link() +
geom_node_point(aes(color = gender ))
V(graph)[]
graph <- graph_from_data_frame(nodes, vertices = edges)
graph <- graph_from_data_frame(d=edges, vertices = nodes)
graph
V(graph)[]
graph
net <- graph_from_data_frame(d=edges, vertices = nodes)
net
plot(net, edge.arrow.size=.4,vertex.label=NA)
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
net <- graph_from_data_frame(d=edges, vertices = nodes)
#
plot(net, edge.arrow.size=.4,vertex.label=NA, edge.curved=.3)
